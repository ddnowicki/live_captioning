name: Production Deployment

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create production docker-compose file
      run: |
        cat > docker-compose.prod.yml << 'EOF'
        version: '3.9'
        
        services:
          web:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
            environment:
              - HOST=0.0.0.0
              - PORT=3000
              - REACT_APP_WS_URL=ws://api:3001
            ports:
              - "3000:3000"
            depends_on:
              - api
            restart: unless-stopped
            networks:
              - live-captioning-network
        
          api:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            environment:
              - HOST=0.0.0.0
              - PORT=3001
              - DEEPGRAM_API_KEY=${{ secrets.DEEPGRAM_API_KEY }}
              - OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            ports:
              - "3001:3001"
            restart: unless-stopped
            networks:
              - live-captioning-network
        
        networks:
          live-captioning-network:
            driver: bridge
            name: live-captioning-prod-net
        EOF

    - name: Upload docker-compose artifact
      uses: actions/upload-artifact@v4
      with:
        name: production-deployment
        path: |
          docker-compose.prod.yml
        retention-days: 30

    - name: Deploy to production (example)
      run: |
        echo "🚀 Production deployment complete!"
        echo "Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest"
        echo "Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest"
        echo ""
        echo "To deploy on your production server, use:"
        echo "docker compose -f docker-compose.prod.yml pull"
        echo "docker compose -f docker-compose.prod.yml up -d"

  health-check:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    steps:
    - name: Production health check
      run: |
        echo "🏥 Health check would run here"
        echo "Example: curl -f http://your-production-domain/health || exit 1"